{"version":3,"sources":["base/media/media.scss","../../../../node_modules/typey/stylesheets/typey/functions/_helpers.scss","../../../../node_modules/typey/stylesheets/typey/mixins/_font-size.scss","../../../../node_modules/typey/stylesheets/typey/mixins/_line-height.scss","init/_typography.scss","init/_colors.scss"],"names":[],"mappings":"AAqBA;EACE,gBAAe;EACf,aAAY;EAEZ,4BAA2B;CAC5B;;AAUD;EAEE,iBC1BwB;ED2BxB,mBAAkB;EAClB,uBAAsB;EACtB,UAAS;CAWV;;AAhBD;;;EAUI,mBAAkB;EAClB,OAAM;EACN,QAAO;EACP,YAAW;EACX,aAAY;CACb;;AAGH;EACE,YAAW;EACX,aAAY;CACb;;AAUD;EACE,iBCxDwB;EDyDxB,iBCzDwB;CD0DzB;;AAED;EElDE,oBDVwB;EESxB,iBCuBwB;EJ8BxB,mBAAsB;EACtB,iCKxDmC;ELyDnC,eKtDmC;CLuDpC","file":"media.css","sourcesContent":["@import 'init/init';\n\n// Media\n//\n// Images, videos and other embedded media.\n//\n// Style guide: 4.5\n\n$chroma: add-colors('primary', (\n    caption-rule: 'grey-light',\n    caption:      'grey-dark',\n));\n\n// Image\n//\n// Responsive images.\n//\n// Markup: image.twig\n//\n// Style guide: 4.5.1\n\nimg {\n  max-width: 100%;\n  height: auto;\n  // Remove that tiny bit of spacing below inline images.\n  vertical-align: text-bottom;\n}\n\n// Video\n//\n// Responsive videos.\n//\n// Markup: video.twig\n//\n// Style guide: 4.5.2\n\n.video,\n%video {\n  margin: 0 0 $spacing-l;\n  position: relative;\n  padding-bottom: 56.25%;\n  height: 0;\n\n  embed,\n  object,\n  iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n  }\n}\n\nvideo {\n  width: 100%;\n  height: auto;\n}\n\n// Figure\n//\n// A captioned image using the `figure` and `figcaption` elements.\n//\n// Markup: figure.twig\n//\n// Style guide: 4.5.3\n\nfigure {\n  max-width: $content-max-width;\n  margin: 0 0 $spacing-l;\n}\n\nfigcaption {\n  @include typeset(body-xs);\n  padding: $spacing-xs 0;\n  border-bottom: $border-style color(caption-rule);\n  color: color(caption);\n}\n","// Output a number in the $base-unit.\n//\n// @param number $number\n//   The number (without unit) to output.\n//\n// @return number\n//   The number with the base unit\n@function typey-output-in-base-unit($number) {\n  @if $number == 0 {\n    @return 0;\n  }\n  @if $base-unit == rem {\n    @return $number * 1rem;\n  }\n  @if $base-unit == px {\n    @return $number * 1px;\n  }\n  @if $base-unit == em {\n    @return $number * 1em;\n  }\n}\n\n// Output a number in a chosen unit.\n//\n// @param number $number\n//   The number (without unit) to output.\n// @param string $unit\n//   (optional) The unit to output, either em, px or rem.\n//\n// @return number\n//   The number with the base unit\n@function typey-output-in-unit($number, $unit: $base-unit) {\n  @if $number == 0 {\n    @return 0;\n  }\n  @if $unit == rem {\n    @return $number * 1rem;\n  }\n  @if $unit == px {\n    @return $number * 1px;\n  }\n  @if $unit == em {\n    @return $number * 1em;\n  }\n}\n\n// Remove the unit from a number.\n//\n// @param number $number\n//   The number (with unit) to convert. Allowed units: any\n//\n// @return number\n//   The number without the unit.\n@function typey-strip-unit($number) {\n  @if type-of($number) == \"number\" and not unitless($number) {\n    @return $number / ($number * 0 + 1);\n  }\n  @return $number;\n}\n","// Define font-size (with fallback)\n//\n// @param number|string $size\n//   A size from the $font-size map or px value to be converted\n// @param number|string $context\n//   (optional) Only used if em is the $base-unit. The value of the elements/parents\n//   font-size if it differs from $base-font-size. Specified as a t-shirt size or\n//   value in px.\n@mixin font-size($size, $context: $base-font-size) {\n  $allowed-types: \"font-size\", \"px\";\n  $type: typey-validator($size, $allowed-types);\n  @if $base-unit == rem {\n    @if $rem-fallback == true {\n      @if $type == \"font-size\" {\n        $map-size: map-get($font-size, $size);\n        font-size: $map-size;\n      }\n      @if $type == \"px\" {\n        font-size: $size;\n      }\n    }\n  }\n  font-size: font-size($size, $context);\n}\n","// Define line-height (with fallback).\n//\n// @param number $x\n//   Multiple of line height to be used or px value to be converted.\n// @param number|string $context\n//   (optional) Only used if em is the $base-unit. The value of the\n//   elements/parents font-size if it differs from $base-font-size.\n//   Specified as a t-shirt size or value in px.\n@mixin line-height($x, $context: $base-font-size) {\n  $allowed-types: \"multiplier\", \"px\";\n  $type: typey-validator($x, $allowed-types);\n  @if $base-unit == rem and $line-height-method == \"rhythm\" {\n    @if $rem-fallback == true {\n      @if $type == \"multiplier\" {\n        line-height: $x * $base-line-height;\n      }\n      @if $type == \"px\" {\n        line-height: $x;\n      }\n    }\n  }\n  line-height: line-height($x, $context);\n}\n","// Typey\n//\n// Typey is used to manage and resize units and font sizes. Some documentation is available in\n// [Jacks typey repo](https://github.com/jptaranto/typey).\n//\n// Style guide: 1.5\n\n@import 'typey';\n\n$base-unit:               rem;\n// Enable REM fallbacks if the project is IE8+\n// Ensure use of mixins, instead of functions.\n$rem-fallback:            false;\n\n$base-font-size:          16px;\n// The base line height is used when specify unitless spacing for margins.\n// e.g. @include margin(1) will output margin: 20px; (converted to rem).\n$base-line-height:        26px;\n\n// Ratio line-height is the simplest line height method, and is expressed as a unitless\n// ratio of the font-size.\n$line-height-method:      ratio;\n$base-line-height-ratio:  1.6;\n\n$font-weight: (\n  bold:          700,\n  medium:        600,\n  normal:        400\n);\n\n// Generic typeset() values.\n$typestyles: (\n  heading-xxl:    56px 1.1 bold, // h1\n  heading-xl:     40px 1.1 medium,\n  heading-l:      32px 1.1 medium, // h2\n  heading-m:      24px 1.2 medium, // h3\n  heading-s:      18px 1.2 medium, // h4\n  heading-xs:     16px 1.2 medium, // h5\n  heading-xxs:    14px 1.2 medium, // h5\n  body-xxl:       32px 1.4,\n  body-xl:        24px 1.6, // blockquote\n  body-l:         20px 1.6, // lede\n  body-m:         18px 1.6,\n  body-s:         16px 1.6, // default\n  body-xs:        14px 1.6, // small, caption\n  body-xxs:       12px 1.6,\n  ui-xxl:         32px 1,\n  ui-xl:          24px 1,\n  ui-l:           20px 1,\n  ui-m:           18px 1,\n  ui-s:           16px 1, // input, buttons, label\n  ui-xs:          14px 1, // small row\n  ui-xxs:         12px 1,\n);\n\n// Font stacks\n$font-base:      Gibson, Helvetica, Arial, sans-serif;\n\n$typefaces: (\n  base:          $font-base,\n);\n","// scss-lint:disable ColorKeyword, ColorVariable, SpaceAfterComma\n\n// Colors\n//\n// Use the `color()` function to add colors to CSS properties. Documentation is available in\n// [John Albins Github site](http://johnalbin.github.io/chroma/).\n//\n// Markup: chroma-kss-markup.twig\n//\n// Style guide: 1.1\n\n@import 'chroma';\n@import 'chroma/kss';\n\n// These colours make up the building blocks for component colors.\n$chroma: define-default-color-scheme('Descriptive color names for use in \"functional\" color names below.');\n$chroma: add-colors((\n    'white':                  #fff,\n    'grey-xlight':            #f9f9f9,\n    'grey-light':             #e6e6e6,\n    'grey':                   #7f7f7f,\n    'grey-mid':               #6f6f6f, // lightest for text\n    'grey-dark':              #4a4e57,\n    'black':                  #0d121f,\n    'blue-light':             #e8f1fa,\n    'blue':                   #1976d2,\n    'dark-blue':              #002664,\n    'teal':                   #00a1b6,\n    'blue-green':             #009688,\n    'green-vibrant':          #3a863d,\n    'green-light':            #6b9d41,\n    'purple':                 #903f97,\n    'orange':                 #f78f1e,\n    'red':                    #e41e63,\n    'translucent-shadow':     ('black' rgba .5),\n    'translucent-overlay':    ('black' rgba .6),\n    'translucent-black':      ('black' rgba .8),\n));\n\n// The primary color scheme provides components with colors.\n// Primary colors should be defined in each component.\n// @see src/base/text/_text.scss for an example.\n$chroma: define-color-scheme('primary', 'Colors used by design components.');\n\n$chroma-active-scheme: 'primary';\n"]}