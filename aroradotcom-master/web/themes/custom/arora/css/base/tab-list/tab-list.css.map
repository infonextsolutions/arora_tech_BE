{"version":3,"sources":["components/tab-list/tab-list.scss","utils/mixins/_mixins.scss","../../../../node_modules/typey/stylesheets/typey/mixins/_font-size.scss","../../../../node_modules/typey/stylesheets/typey/functions/_helpers.scss","../../../../node_modules/typey/stylesheets/typey/mixins/_line-height.scss","init/_typography.scss","init/_colors.scss","../../../../node_modules/breakpoint-sass/stylesheets/_breakpoint.scss","components/tab-list/tab-list.css"],"names":[],"mappings":"AAiBA;ECgGE,UAAS;EACT,WAAU;EACV,iBAAgB;EAChB,gBAAe;EC9Ff,oBCVwB;ECSxB,eC8BsB;EL9BtB,iBGTwB;EHUxB,0BMHmC;ENInC,qBAAa;EAAb,qBAAa;EAAb,cAAa;EACb,oBAAe;MAAf,gBAAe;CA+BhB;;AAtCD;ECsGI,iBAAgB;CACjB;;AD9FD;;;;;EACE,oBMRiC;ENSjC,eMLiC;CNMlC;;AAED;;EAKE,gBGxBsB;EHyBtB,iBKVgB;ELWhB,eAAc;EACd,sBAAqB;CAMtB;;AOmBC;EPjCF;;IAGI,cGtBoB;GHiCvB;CQNF;;ARQC;EACE,UAAS;CACV;;AAGD;EACE,cAAa;CACd","file":"tab-list.css","sourcesContent":["@import 'init/init';\n@import 'utils/mixins/mixins';\n\n// Tab list\n//\n// Minimal, list of tabs that wrap on mobile.\n//\n// Markup: tab-list.twig\n//\n// Style guide: 6.9\n\n$chroma: add-colors('primary', (\n    tab-border:     'grey-light',\n    tab-active:     'black',\n    tab-bg-active:  'grey-light',\n));\n\n.tab-list,\n%tab-list {\n  @include reset-list;\n  @include typeset(ui-xs);\n  margin-top: $spacing-m;\n  border: 1px solid color(tab-border);\n  display: flex;\n  flex-wrap: wrap;\n\n  &__active {\n    background: color(tab-bg-active);\n    color: color(tab-active);\n  }\n\n  &__tab,\n  a {\n    @include respond-to(tablet-portrait-up) {\n      padding: $spacing-m;\n    }\n    padding: $spacing-s;\n    font-weight: weight(normal);\n    display: block;\n    text-decoration: none;\n\n    &--active,\n    &.is-active {\n      @extend %tab-list__active;\n    }\n  }\n\n  &--secondary {\n    border: 0;\n  }\n\n  // Remove spacing from Content admin tabs.\n  #block-tabs & {\n    margin-top: 0;\n  }\n}\n","// sass-lint:disable no-vendor-prefixes no-important\n\n// Mixins\n//\n// Style guide: 2.7\n\n// placholder($color, $style)\n//\n// Allows form elements to quickly implement placeholder browser prefixes.\n//\n// $color - A Hex color to use for placeholder text.\n// $style - A font-style to use for placeholder test.\n//\n// Style guide: 2.7.1\n\n@mixin placeholder($color, $style) {\n  &::-webkit-input-placeholder {\n    // Chrome/Opera/Safari\n    color: $color;\n    opacity: 1;\n    font-style: $style;\n  }\n\n  &::-moz-placeholder {\n    // Firefox 19+\n    color: $color;\n    opacity: 1;\n    font-style: $style;\n  }\n\n  &:-ms-input-placeholder {\n    // IE 10+\n    color: $color;\n    opacity: 1;\n    font-style: $style;\n  }\n\n  &:-moz-placeholder {\n    // Firefox 18-\n    color: $color;\n    opacity: 1;\n    font-style: $style;\n  }\n}\n\n// rtl()\n//\n// Includes Right-To-Left langauge support. Can be turned off globally by\n// setting `$include-rtl: false;`.\n//\n// Style guide: 2.7.2\n\n$include-rtl: true !default;\n\n@mixin rtl {\n  [dir=\"rtl\"] & {\n    @content;\n  }\n}\n\n// print-none()\n//\n// Do not display for printed media.\n//\n// Style guide: 2.7.3\n\n@mixin print-none {\n  @media print {\n    display: none;\n  }\n}\n\n// print-only()\n//\n// Only display for printed media.\n//\n// Style guide: 2.7.4\n\n@mixin print-only {\n  display: none;\n\n  @media print {\n    display: block;\n  }\n}\n\n// image-replace()\n//\n// Modern image replacement technique from Zeldman.\n// See http://www.zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement/\n//\n// Style guide: 2.7.5\n\n@mixin image-replace($display: block) {\n  display: $display;\n  text-indent: 100%;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n@mixin image-replace-reset {\n  text-indent: 0;\n  white-space: normal;\n  overflow: auto;\n}\n\n// Reset list\n//\n// Safely reset `ul` and `ol` and their children `li` elements.\n//\n// Style guide: 2.7.6\n\n@mixin reset-list {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  max-width: none;\n\n  li {\n    margin-bottom: 0;\n  }\n}\n\n// Reset fieldset\n//\n// Safely reset `fieldset` and their children `legend` elements.\n//\n// Style guide: 2.7.7\n\n@mixin reset-fieldset {\n  border: 0;\n  padding: 0;\n  margin: 0;\n  min-width: 0;\n\n  legend {\n    padding: 0;\n    display: table;\n  }\n}\n\n// Reset headings\n//\n// Safely reset `h1-h6` elements.\n//\n// Style guide: 2.7.8\n\n@mixin reset-heading {\n  @include typeset(body-s);\n  margin: 0;\n  font-weight: weight(normal);\n  font-style: normal;\n}\n\n// Visually hidden\n//\n// Make an element visually hidden, but accessible to screen readers.\n//\n// Style guide: 2.7.9\n\n@mixin visually-hidden {\n  position: absolute !important;\n  height: 1px;\n  width: 1px;\n  overflow: hidden;\n  clip: rect(1px, 1px, 1px, 1px);\n}\n\n@mixin visually-hidden-off {\n  position: static !important;\n  clip: auto;\n  height: auto;\n  width: auto;\n  overflow: auto;\n}\n\n// Clearfix\n//\n// Clear floated elements.\n//\n// Style guide: 2.7.10\n\n@mixin clearfix {\n  &::after {\n    content: '';\n    display: block;\n    clear: both;\n  }\n}\n","// Define font-size (with fallback)\n//\n// @param number|string $size\n//   A size from the $font-size map or px value to be converted\n// @param number|string $context\n//   (optional) Only used if em is the $base-unit. The value of the elements/parents\n//   font-size if it differs from $base-font-size. Specified as a t-shirt size or\n//   value in px.\n@mixin font-size($size, $context: $base-font-size) {\n  $allowed-types: \"font-size\", \"px\";\n  $type: typey-validator($size, $allowed-types);\n  @if $base-unit == rem {\n    @if $rem-fallback == true {\n      @if $type == \"font-size\" {\n        $map-size: map-get($font-size, $size);\n        font-size: $map-size;\n      }\n      @if $type == \"px\" {\n        font-size: $size;\n      }\n    }\n  }\n  font-size: font-size($size, $context);\n}\n","// Output a number in the $base-unit.\n//\n// @param number $number\n//   The number (without unit) to output.\n//\n// @return number\n//   The number with the base unit\n@function typey-output-in-base-unit($number) {\n  @if $number == 0 {\n    @return 0;\n  }\n  @if $base-unit == rem {\n    @return $number * 1rem;\n  }\n  @if $base-unit == px {\n    @return $number * 1px;\n  }\n  @if $base-unit == em {\n    @return $number * 1em;\n  }\n}\n\n// Output a number in a chosen unit.\n//\n// @param number $number\n//   The number (without unit) to output.\n// @param string $unit\n//   (optional) The unit to output, either em, px or rem.\n//\n// @return number\n//   The number with the base unit\n@function typey-output-in-unit($number, $unit: $base-unit) {\n  @if $number == 0 {\n    @return 0;\n  }\n  @if $unit == rem {\n    @return $number * 1rem;\n  }\n  @if $unit == px {\n    @return $number * 1px;\n  }\n  @if $unit == em {\n    @return $number * 1em;\n  }\n}\n\n// Remove the unit from a number.\n//\n// @param number $number\n//   The number (with unit) to convert. Allowed units: any\n//\n// @return number\n//   The number without the unit.\n@function typey-strip-unit($number) {\n  @if type-of($number) == \"number\" and not unitless($number) {\n    @return $number / ($number * 0 + 1);\n  }\n  @return $number;\n}\n","// Define line-height (with fallback).\n//\n// @param number $x\n//   Multiple of line height to be used or px value to be converted.\n// @param number|string $context\n//   (optional) Only used if em is the $base-unit. The value of the\n//   elements/parents font-size if it differs from $base-font-size.\n//   Specified as a t-shirt size or value in px.\n@mixin line-height($x, $context: $base-font-size) {\n  $allowed-types: \"multiplier\", \"px\";\n  $type: typey-validator($x, $allowed-types);\n  @if $base-unit == rem and $line-height-method == \"rhythm\" {\n    @if $rem-fallback == true {\n      @if $type == \"multiplier\" {\n        line-height: $x * $base-line-height;\n      }\n      @if $type == \"px\" {\n        line-height: $x;\n      }\n    }\n  }\n  line-height: line-height($x, $context);\n}\n","// Typey\n//\n// Typey is used to manage and resize units and font sizes. Some documentation is available in\n// [Jacks typey repo](https://github.com/jptaranto/typey).\n//\n// Style guide: 1.5\n\n@import 'typey';\n\n$base-unit:               rem;\n// Enable REM fallbacks if the project is IE8+\n// Ensure use of mixins, instead of functions.\n$rem-fallback:            false;\n\n$base-font-size:          16px;\n// The base line height is used when specify unitless spacing for margins.\n// e.g. @include margin(1) will output margin: 20px; (converted to rem).\n$base-line-height:        26px;\n\n// Ratio line-height is the simplest line height method, and is expressed as a unitless\n// ratio of the font-size.\n$line-height-method:      ratio;\n$base-line-height-ratio:  1.6;\n\n$font-weight: (\n  bold:          700,\n  medium:        600,\n  normal:        400\n);\n\n// Generic typeset() values.\n$typestyles: (\n  heading-xxl:    56px 1.1 bold, // h1\n  heading-xl:     40px 1.1 medium,\n  heading-l:      32px 1.1 medium, // h2\n  heading-m:      24px 1.2 medium, // h3\n  heading-s:      18px 1.2 medium, // h4\n  heading-xs:     16px 1.2 medium, // h5\n  heading-xxs:    14px 1.2 medium, // h5\n  body-xxl:       32px 1.4,\n  body-xl:        24px 1.6, // blockquote\n  body-l:         20px 1.6, // lede\n  body-m:         18px 1.6,\n  body-s:         16px 1.6, // default\n  body-xs:        14px 1.6, // small, caption\n  body-xxs:       12px 1.6,\n  ui-xxl:         32px 1,\n  ui-xl:          24px 1,\n  ui-l:           20px 1,\n  ui-m:           18px 1,\n  ui-s:           16px 1, // input, buttons, label\n  ui-xs:          14px 1, // small row\n  ui-xxs:         12px 1,\n);\n\n// Font stacks\n$font-base:      Gibson, Helvetica, Arial, sans-serif;\n\n$typefaces: (\n  base:          $font-base,\n);\n","// scss-lint:disable ColorKeyword, ColorVariable, SpaceAfterComma\n\n// Colors\n//\n// Use the `color()` function to add colors to CSS properties. Documentation is available in\n// [John Albins Github site](http://johnalbin.github.io/chroma/).\n//\n// Markup: chroma-kss-markup.twig\n//\n// Style guide: 1.1\n\n@import 'chroma';\n@import 'chroma/kss';\n\n// These colours make up the building blocks for component colors.\n$chroma: define-default-color-scheme('Descriptive color names for use in \"functional\" color names below.');\n$chroma: add-colors((\n    'white':                  #fff,\n    'grey-xlight':            #f9f9f9,\n    'grey-light':             #e6e6e6,\n    'grey':                   #7f7f7f,\n    'grey-mid':               #6f6f6f, // lightest for text\n    'grey-dark':              #4a4e57,\n    'black':                  #0d121f,\n    'blue-light':             #e8f1fa,\n    'blue':                   #1976d2,\n    'dark-blue':              #002664,\n    'teal':                   #00a1b6,\n    'blue-green':             #009688,\n    'green-vibrant':          #3a863d,\n    'green-light':            #6b9d41,\n    'purple':                 #903f97,\n    'orange':                 #f78f1e,\n    'red':                    #e41e63,\n    'translucent-shadow':     ('black' rgba .5),\n    'translucent-overlay':    ('black' rgba .6),\n    'translucent-black':      ('black' rgba .8),\n));\n\n// The primary color scheme provides components with colors.\n// Primary colors should be defined in each component.\n// @see src/base/text/_text.scss for an example.\n$chroma: define-color-scheme('primary', 'Colors used by design components.');\n\n$chroma-active-scheme: 'primary';\n","//////////////////////////////\n// Default Variables\n//////////////////////////////\n$Breakpoint-Settings: (\n  'default media': all,\n  'default feature': min-width,\n  'default pair': width,\n\n  'force all media type': false,\n  'to ems': false,\n  'transform resolutions': true,\n\n  'no queries': false,\n  'no query fallbacks': false,\n\n  'base font size': 16px,\n\n  'legacy syntax': false\n);\n\n$breakpoint: () !default;\n\n//////////////////////////////\n// Imports\n//////////////////////////////\n@import \"breakpoint/settings\";\n@import 'breakpoint/context';\n@import 'breakpoint/helpers';\n@import 'breakpoint/parsers';\n@import 'breakpoint/no-query';\n\n@import 'breakpoint/respond-to';\n\n@import \"breakpoint/legacy-settings\";\n\n//////////////////////////////\n// Breakpoint Mixin\n//////////////////////////////\n\n@mixin breakpoint($query, $no-query: false) {\n  @include legacy-settings-warning;\n\n  // Reset contexts\n  @include private-breakpoint-reset-contexts();\n\n  $breakpoint: breakpoint($query, false);\n\n  $query-string: map-get($breakpoint, 'query');\n  $query-fallback: map-get($breakpoint, 'fallback');\n\n  $private-breakpoint-context-holder: map-get($breakpoint, 'context holder') !global;\n  $private-breakpoint-query-count: map-get($breakpoint, 'query count') !global;\n\n  // Allow for an as-needed override or usage of no query fallback.\n  @if $no-query != false {\n    $query-fallback: $no-query;\n  }\n\n  @if $query-fallback != false {\n    $context-setter: private-breakpoint-set-context('no-query', $query-fallback);\n  }\n\n  // Print Out Query String\n  @if not breakpoint-get('no queries') {\n    @media #{$query-string} {\n      @content;\n    }\n  }\n\n  @if breakpoint-get('no query fallbacks') != false or breakpoint-get('no queries') == true {\n\n    $type: type-of(breakpoint-get('no query fallbacks'));\n    $print: false;\n\n    @if ($type == 'bool') {\n      $print: true;\n    }\n    @else if ($type == 'string') {\n      @if $query-fallback == breakpoint-get('no query fallbacks') {\n        $print: true;\n      }\n    }\n    @else if ($type == 'list') {\n      @each $wrapper in breakpoint-get('no query fallbacks') {\n        @if $query-fallback == $wrapper {\n          $print: true;\n        }\n      }\n    }\n\n    // Write Fallback\n    @if ($query-fallback != false) and ($print == true) {\n      $type-fallback: type-of($query-fallback);\n\n      @if ($type-fallback != 'bool') {\n        #{$query-fallback} & {\n          @content;\n        }\n      }\n      @else {\n        @content;\n      }\n    }\n  }\n\n  @include private-breakpoint-reset-contexts();\n}\n\n\n@mixin mq($query, $no-query: false) {\n  @include breakpoint($query, $no-query) {\n    @content;\n  }\n}\n",".tab-list {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  max-width: none;\n  font-size: 0.875rem;\n  line-height: 1;\n  margin-top: 1rem;\n  border: 1px solid #e6e6e6;\n  display: flex;\n  flex-wrap: wrap;\n}\n\n.tab-list li {\n  margin-bottom: 0;\n}\n\n.tab-list__active,\n.tab-list__tab--active,\n.tab-list__tab.is-active,\n.tab-list a--active,\n.tab-list a.is-active {\n  background: #e6e6e6;\n  color: #0d121f;\n}\n\n.tab-list__tab,\n.tab-list a {\n  padding: 0.5rem;\n  font-weight: 400;\n  display: block;\n  text-decoration: none;\n}\n\n@media (min-width: 600px) {\n  .tab-list__tab,\n  .tab-list a {\n    padding: 1rem;\n  }\n}\n\n.tab-list--secondary {\n  border: 0;\n}\n\n#block-tabs .tab-list {\n  margin-top: 0;\n}\n"]}