{"version":3,"sources":["base/text/text.scss","../../../../node_modules/typey/stylesheets/typey/mixins/_define-type-sizing.scss","init/_typography.scss","../../../../node_modules/typey/stylesheets/typey/mixins/_typeface.scss","init/_colors.scss","../../../../node_modules/typey/stylesheets/typey/_defaults.scss","base/text/text.css","../../../../node_modules/typey/stylesheets/typey/functions/_helpers.scss","../../../../node_modules/typey/stylesheets/typey/mixins/_font-size.scss","../../../../node_modules/typey/stylesheets/typey/mixins/_line-height.scss","../../../../node_modules/breakpoint-sass/stylesheets/_breakpoint.scss","../../../../node_modules/typey/stylesheets/typey/mixins/_typeset.scss"],"names":[],"mappings":"AAoBA;EACE,+BAAsB;UAAtB,uBAAsB;CACvB;;AAED;ECdI,gBAA4C;EAW1C,iBCCuB;EC6CzB,kDDXiD;EF7BnD,eIJmC;EJKnC,iBIXgC;EJchC,6CAA4C;CAC7C;;ACIK;EDZN;ICaQ,gBIDuB;GLJ9B;CMfA;;ANiBD;EACE,gBAAe;EACf,aAAY;CACb;;AAED;EACE,eIfmC;CJgBpC;;AAaD;;EAEE,iBE9BkB;CF+BnB;;AAUD;;EAEE,mBAAkB;CACnB;;AAUD;EACE,iBOrEwB;EPsExB,iBOtEwB;CPuEzB;;AAED;EQ/DE,kBDVwB;EESxB,iBPmBwB;CFmDzB;;AU3BG;EVqBJ;IQ/DE,gBDVwB;IESxB,iBPkBwB;GFoDzB;CMtCA;;ANwCD;EQvEE,mBDVwB;EESxB,iBPoBwB;CF0DzB;;AUnCG;EV6BJ;IQvEE,kBDVwB;IESxB,iBPmBwB;GF2DzB;CMlCA;;ANoCD;;EQ/EE,oBDVwB;EESxB,iBPqBwB;CFkEzB;;AU5CG;EVqCJ;;IQ/EE,mBDVwB;IESxB,iBPoBwB;GFmEzB;CM7BA;;AN+BD;;;;EQxFE,gBDVwB;EESxB,iBPsBwB;CF4EzB;;AUvDG;EV8CJ;;;;IQxFE,oBDVwB;IESxB,iBPqBwB;GF6EzB;CMtBA;;ANwBD;;EQnGE,oBDVwB;EESxB,iBPuBwB;CFoFzB;;AUhEG;EVyDJ;;IQnGE,gBDVwB;IESxB,iBPsBwB;GFqFzB;CMjBA;;ANmBD;EQ5GE,mBDVwB;EESxB,iBPwBwB;CF2FzB;;AUxEG;EVkEJ;IQ5GE,oBDVwB;IESxB,iBPuBwB;GF4FzB;CMbA;;ANeD;EQpHE,mBDVwB;EESxB,iBPwBwB;CF+FzB;;AAUD;;EQhIE,kBDVwB;EESxB,iBPYwB;ESuDtB,iBT9DgB;EF+HlB,iBEhIkB;EFiIlB,mBAAkB;EAClB,eAAoB;CASrB;;AUpGG;EVsFJ;;IQhIE,kBDVwB;IESxB,iBPWwB;ISwDtB,iBT/DgB;GF2InB;CMjBA;;ANGD;;EAYI,cAAa;CACd;;AAGH;EQhJE,gBDVwB;EESxB,iBPawB;ESsDtB,iBT9DgB;EF8IlB,eAAoB;CAKrB;;AU7GG;EVsGJ;IQhJE,kBDVwB;IESxB,iBPYwB;ISuDtB,iBT9DgB;GFmJnB;CMNA;;ANQD;;EQzJE,kBDVwB;EESxB,iBPcwB;ESqDtB,iBT9DgB;EFwJlB,eAAoB;CASrB;;AU3HG;EV+GJ;;IQzJE,gBDVwB;IESxB,iBPawB;ISsDtB,iBT9DgB;GFiKnB;CMHA;;ANTD;;EAUI,cAAa;CACd;;AAGH;;EQvKE,oBDVwB;EESxB,iBPewB;ESoDtB,iBT9DgB;EFsKlB,eAAoB;CASrB;;AUzIG;EV6HJ;;IQvKE,kBDVwB;IESxB,iBPcwB;ISqDtB,iBT9DgB;GF+KnB;CMKA;;ANjBD;;EAUI,cAAa;CACd;;AAGH;;EQrLE,gBDVwB;EESxB,iBPgBwB;ESmDtB,iBT9DgB;EFoLlB,eAAoB;CAKrB;;AUnJG;EV2IJ;;IQrLE,oBDVwB;IESxB,iBPewB;ISoDtB,iBT9DgB;GFyLnB;CMiBA;;ANfD;;;EQ/LE,gBDVwB;EESxB,iBPgBwB;ESmDtB,iBT9DgB;EF+LlB,eAAoB;CACrB;;AAED;EQtME,oBDVwB;EESxB,iBPiBwB;ESkDtB,iBT9DgB;CFoMnB;;AAmBD;;EAEE,iBOvOwB;EPwOxB,oBOxOwB;CPmPzB;;AAdD;;;;EAQI,cAAa;CACd;;AATH;;EAYI,iBOjPsB;CPkPvB;;AAWH;EAEI,iBAAsB;EACtB,iBElPgB;CFuPjB;;AARH;EAMM,cAAa;CACd;;AAPL;EAWI,UAAS;CACV;;AAWH;EQ1QE,oBDVwB;EESxB,iBPqBwB;EFwPxB,eAAoB;EACpB,oBOvRwB;EPwRxB,+BI3QmC;CJgRpC;;AUzOG;EVgOJ;IQ1QE,kBDVwB;IESxB,iBPmBwB;GFiQzB;CMRA;;ANiBD;EACE,mBAAkB;CAanB;;AAdD;;;EAMI,kBAAiB;EACjB,mBAAkB;EAClB,iBO9SsB;CP+SvB;;AATH;EAYI,4BACF;CAAC;;AAEH;EAEE,iBAAe;EACf,eAAa;CACd","file":"text.css","sourcesContent":["// sass-lint:disable no-vendor-prefixes\n\n@import 'init/init';\n\n// Typography\n//\n// Text in its default appearance.\n//\n// Markup: text-defaults.twig\n//\n// Style guide: 4.1\n\n$chroma: add-colors('primary', (\n    text:      'black',\n    text-alt:  'grey',\n    text-bg:   'white',\n    heading:   'black',\n    text-rule: 'grey-light'\n));\n\n* {\n  box-sizing: border-box;\n}\n\nhtml {\n  @include define-type-sizing;\n  @include typeface(base);\n  color: color(text);\n  background: color(text-bg);\n\n  // Hide scroll bars on IE.\n  -ms-overflow-style: -ms-autohiding-scrollbar;\n}\n\nimg {\n  max-width: 100%;\n  height: auto;\n}\n\n.text--blue {\n  color: color('blue');\n}\n\n// Strong (bold)\n//\n// Bold text using the `<strong>` tag. Please note that bold text uses a _semi-bold_ weight\n// (600 instead of 700), so using `font-weight: bold;` will produce text that\n// uses faux bold (and hence will look poor). Instead use the `<strong>` tag or\n// `font-weight: weight(bold);` if implementing in SASS.\n//\n// Markup: text-strong.twig\n//\n// Style guide: 4.1.1\n\nb,\nstrong {\n  font-weight: weight(medium);\n}\n\n// Emphasis (italic)\n//\n// Italic text using the `<em>` tag.\n//\n// Markup: text-em.twig\n//\n// Style guide: 4.1.2\n\ni,\nem {\n  font-style: italic;\n}\n\n// Paragraph\n//\n// Text grouped with paragraph tags.\n//\n// Markup: text-p.twig\n//\n// Style guide: 4.1.3\n\np {\n  margin: 0 0 $spacing-l;\n  max-width: $content-max-width;\n}\n\n.body--xxl {\n  @include typeset(body-xl);\n\n  @include respond-to(tablet-portrait-up) {\n    @include typeset(body-xxl);\n  }\n}\n\n.body--xl {\n  @include typeset(body-l);\n\n  @include respond-to(tablet-portrait-up) {\n    @include typeset(body-xl);\n  }\n}\n\n.lede,\n.body--l {\n  @include typeset(body-m);\n\n  @include respond-to(tablet-portrait-up) {\n    @include typeset(body-l);\n  }\n}\n\np,\nul,\nol,\n.body--m {\n  @include typeset(body-s);\n\n  @include respond-to(tablet-portrait-up) {\n    @include typeset(body-m);\n  }\n}\n\n.small,\n.body--s {\n  @include typeset(body-xs);\n\n  @include respond-to(tablet-portrait-up) {\n    @include typeset(body-s);\n  }\n}\n\n.body--xs {\n  @include typeset(body-xxs);\n\n  @include respond-to(tablet-portrait-up) {\n    @include typeset(body-xs);\n  }\n}\n\n.body--xxs {\n  @include typeset(body-xxs);\n}\n\n// Headings\n//\n// `<h1>` through to `<h6>` tag text and the spacing relationship with paragraphs.\n//\n// Markup: text-h.twig\n//\n// Style guide: 4.1.4\n\nh1,\n.heading--xxl {\n  @include typeset(heading-xl);\n  font-weight: weight(bold);\n  font-style: normal;\n  margin: $spacing-l 0;\n\n  @include respond-to(tablet-portrait-up) {\n    @include typeset(heading-xxl);\n  }\n\n  &:first-child {\n    margin-top: 0;\n  }\n}\n\n.heading--xl {\n  @include typeset(heading-l);\n  margin: $spacing-m 0;\n\n  @include respond-to(tablet-portrait-up) {\n    @include typeset(heading-xl);\n  }\n}\n\nh2,\n.heading--l {\n  @include typeset(heading-m);\n  margin: $spacing-m 0;\n\n  @include respond-to(tablet-portrait-up) {\n    @include typeset(heading-l);\n  }\n\n  &:first-child {\n    margin-top: 0;\n  }\n}\n\nh3,\n.heading--m {\n  @include typeset(heading-s);\n  margin: $spacing-l 0;\n\n  @include respond-to(tablet-portrait-up) {\n    @include typeset(heading-m);\n  }\n\n  &:first-child {\n    margin-top: 0;\n  }\n}\n\nh4,\n.heading--s {\n  @include typeset(heading-xs);\n  margin: $spacing-m 0;\n\n  @include respond-to(tablet-portrait-up) {\n    @include typeset(heading-s);\n  }\n}\n\nh5,\nh6,\n.heading--xs {\n  @include typeset(heading-xs);\n  margin: $spacing-m 0;\n}\n\n.heading--xxs {\n  @include typeset(heading-xxs);\n}\n\n// Unordered list\n//\n// The standard approach for a bullet (unordered list) is to use the default\n// `<ul>` tag as shown below.\n//\n// Markup: text-ul.twig\n//\n// Style guide: 4.1.5\n\n// Ordered list\n//\n// An ordered list.\n//\n// Markup: text-ol.twig\n//\n// Style guide: 4.1.6\n\nul,\nol {\n  margin: 0 0 $spacing-l;\n  padding: 0 0 0 $spacing-m;\n\n  // Nested lists have altered spacing.\n  ul,\n  ol {\n    margin: 0 0 0;\n  }\n\n  li {\n    max-width: $content-max-width;\n  }\n}\n\n// Definition list\n//\n// A list of terms and definitions.\n//\n// Markup: text-dl.twig\n//\n// Style guide: 4.1.7\n\ndl {\n  dt {\n    margin: $spacing-l 0 0;\n    font-weight: weight(medium);\n\n    &:first-child {\n      margin-top: 0;\n    }\n  }\n\n  dd {\n    margin: 0;\n  }\n}\n\n// Blockquote\n//\n// A pull quote block.\n//\n// Markup: text-blockquote.twig\n//\n// Style guide: 4.1.8\n\nblockquote {\n  @include typeset(body-m);\n  margin: $spacing-l 0;\n  padding: 0 0 0 $spacing-l;\n  border-left: 4px solid color('blue');\n\n  @include respond-to(tablet-portrait-up) {\n    @include typeset(body-xl);\n  }\n}\n\n// Centered text\n//\n// A utility class for making text centered. Useful for centered heading styles.\n//\n// Markup: text-centered.twig\n//\n// Style guide: 4.1.9\n.centered {\n  text-align: center;\n\n  p,\n  ul,\n  ol {\n    margin-left: auto;\n    margin-right: auto;\n    max-width: $content-max-width;\n  }\n\n  li {\n    list-style-position: inside\n  }\n}\n.align--left\n{\n  text-align:left;\n  color:#1976d2;\n}","// Define defaults (use this in the HTML element).\n//\n// @param number $size\n//   (optional) The font-size. Use to set to anything other than $base-font-size.\n// @param number $line-height\n//   (optional) The line-height. Use to set to anything other than $base-line-height.\n//   Set to a ratio when $line-height-as-ratio is true. Will default to $base-line-height-ratio.\n//   Set to false if you do not want to change a ratio of line-height already set.\n@mixin define-type-sizing($size: $base-font-size, $line-height: $base-line-height) {\n  @if $base-unit == rem or $base-unit == em {\n    font-size: $size / $browser-font-size * 100%;\n  }\n  @if $base-unit == px {\n    font-size: $size;\n  }\n\n  @if $line-height != false {\n    @if $line-height-method == \"ratio\" {\n      @if $line-height == $base-line-height {\n        $line-height: $base-line-height-ratio;\n      }\n      line-height: $line-height;\n    }\n    @else {\n      @if $base-unit == rem or $base-unit == em {\n        // In the html element, rem means relative to browser default font size; em means relative to html's font size.\n        line-height: calculate-em-px($line-height, $size);\n      }\n      @if $base-unit == px {\n        line-height: $line-height;\n      }\n    }\n  }\n\n  @if $auto-print-sizing == true {\n    @if $base-unit == rem or $base-unit == em {\n      @media print {\n        font-size: $print-font-size;\n      }\n    }\n    @else {\n      @warn \"As you are not using a relative base unit (rem or em) automatic print media sizing will not work. Set $auto-print-sizing to false to hide this warning\"\n    }\n  }\n}\n","// Typey\n//\n// Typey is used to manage and resize units and font sizes. Some documentation is available in\n// [Jacks typey repo](https://github.com/jptaranto/typey).\n//\n// Style guide: 1.5\n\n@import 'typey';\n\n$base-unit:               rem;\n// Enable REM fallbacks if the project is IE8+\n// Ensure use of mixins, instead of functions.\n$rem-fallback:            false;\n\n$base-font-size:          16px;\n// The base line height is used when specify unitless spacing for margins.\n// e.g. @include margin(1) will output margin: 20px; (converted to rem).\n$base-line-height:        26px;\n\n// Ratio line-height is the simplest line height method, and is expressed as a unitless\n// ratio of the font-size.\n$line-height-method:      ratio;\n$base-line-height-ratio:  1.6;\n\n$font-weight: (\n  bold:          700,\n  medium:        600,\n  normal:        400\n);\n\n// Generic typeset() values.\n$typestyles: (\n  heading-xxl:    56px 1.1 bold, // h1\n  heading-xl:     40px 1.1 medium,\n  heading-l:      32px 1.1 medium, // h2\n  heading-m:      24px 1.2 medium, // h3\n  heading-s:      18px 1.2 medium, // h4\n  heading-xs:     16px 1.2 medium, // h5\n  heading-xxs:    14px 1.2 medium, // h5\n  body-xxl:       32px 1.4,\n  body-xl:        24px 1.6, // blockquote\n  body-l:         20px 1.6, // lede\n  body-m:         18px 1.6,\n  body-s:         16px 1.6, // default\n  body-xs:        14px 1.6, // small, caption\n  body-xxs:       12px 1.6,\n  ui-xxl:         32px 1,\n  ui-xl:          24px 1,\n  ui-l:           20px 1,\n  ui-m:           18px 1,\n  ui-s:           16px 1, // input, buttons, label\n  ui-xs:          14px 1, // small row\n  ui-xxs:         12px 1,\n);\n\n// Font stacks\n$font-base:      Gibson, Helvetica, Arial, sans-serif;\n\n$typefaces: (\n  base:          $font-base,\n);\n","// Embed a typeface.\n//\n// @param string $typeface\n//   A font family from the $typefaces map.\n@mixin typeface($typeface) {\n  $typeface-name: $typeface;\n  $typeface: map-get($typefaces, $typeface);\n\n  $font-family: false;\n  $letter-spacing: false;\n  $weight: false;\n  $style: false;\n  $case: false;\n\n  // Assign values to variables when $typeface is a keyed map.\n  @if type-of($typeface) == \"map\" {\n    @if map-has-key($typeface, font-family) {\n      $font-family: map-get($typeface, font-family);\n    }\n    @if map-has-key($typeface, letter-spacing) {\n      $letter-spacing: map-get($typeface, letter-spacing);\n    }\n    @if map-has-key($typeface, weight) {\n      $weight: map-get($typeface, weight);\n    }\n    @if map-has-key($typeface, style) {\n      $style: map-get($typeface, style);\n    }\n    @if map-has-key($typeface, case) {\n      $case: map-get($typeface, case);\n    }\n  }\n\n  // Assign values to variables when $typeface is shorthand.\n  @if type-of($typeface) == \"list\" {\n    @if (list-separator($typeface) == \"comma\") {\n      // This shorthand is just a list of fonts.\n      $font-family: $typeface;\n    }\n    @else {\n      @each $value in $typeface {\n        // This is a font-family.\n        @if type-of($value) == \"list\" {\n          $font-family: $value;\n        }\n        // This is a letter-spacing value.\n        @if type-of($value) == \"number\" {\n          $letter-spacing: $value;\n        }\n        // This is a font-weight value.\n        @if map-has-key($font-weight, $value) {\n          $weight: $value;\n        }\n        // This is a case value.\n        @else if type-of($value) == \"string\" and index($text-transform-values, $value) != null {\n          $case: $value;\n        }\n        // This is a style value.\n        @else if type-of($value) == \"string\" and index($font-style-values, $value) != null {\n          $style: $value;\n        }\n      }\n    }\n  }\n\n  // Output properties.\n  @if $font-family {\n    font-family: $font-family;\n  }\n  @else {\n    @error \"Typeface '#{$typeface-name}' does not have a font-family\";\n  }\n  @if $letter-spacing {\n    @if ($letter-spacing == 0) {\n      letter-spacing: 0;\n    }\n    @else {\n      letter-spacing: calculate-em-px($letter-spacing, $base-font-size);\n    }\n  }\n  @if $weight {\n    font-weight: weight($weight);\n  }\n  @if $style {\n    font-style: $style;\n  }\n  @if $case {\n    text-transform: $case;\n  }\n}\n","// scss-lint:disable ColorKeyword, ColorVariable, SpaceAfterComma\n\n// Colors\n//\n// Use the `color()` function to add colors to CSS properties. Documentation is available in\n// [John Albins Github site](http://johnalbin.github.io/chroma/).\n//\n// Markup: chroma-kss-markup.twig\n//\n// Style guide: 1.1\n\n@import 'chroma';\n@import 'chroma/kss';\n\n// These colours make up the building blocks for component colors.\n$chroma: define-default-color-scheme('Descriptive color names for use in \"functional\" color names below.');\n$chroma: add-colors((\n    'white':                  #fff,\n    'grey-xlight':            #f9f9f9,\n    'grey-light':             #e6e6e6,\n    'grey':                   #7f7f7f,\n    'grey-mid':               #6f6f6f, // lightest for text\n    'grey-dark':              #4a4e57,\n    'black':                  #0d121f,\n    'blue-light':             #e8f1fa,\n    'blue':                   #1976d2,\n    'dark-blue':              #002664,\n    'teal':                   #00a1b6,\n    'blue-green':             #009688,\n    'green-vibrant':          #3a863d,\n    'green-light':            #6b9d41,\n    'purple':                 #903f97,\n    'orange':                 #f78f1e,\n    'red':                    #e41e63,\n    'translucent-shadow':     ('black' rgba .5),\n    'translucent-overlay':    ('black' rgba .6),\n    'translucent-black':      ('black' rgba .8),\n));\n\n// The primary color scheme provides components with colors.\n// Primary colors should be defined in each component.\n// @see src/base/text/_text.scss for an example.\n$chroma: define-color-scheme('primary', 'Colors used by design components.');\n\n$chroma-active-scheme: 'primary';\n","// The browser font size default. No need to change this.\n// Allowed units: px\n$browser-font-size:        16px !default;\n\n// Allowed units: rem, em or px\n$base-unit:                rem !default;\n\n// The base font size will be used for most calculations involving font-size.\n// Allowed units: px\n$base-font-size:           16px !default;\n\n// The base line height will be used for most calculations involving height.\n// Allowed units: px\n$base-line-height:         24px !default;\n\n// The method to calculate line-height. Allowed values: rhythm or ratio.\n// Rhytm uses a vertical rhythm approach where line-height is specified as\n// a multiple of the $base-line-height.\n// Ratio uses a ratio approach where line-height is specified as a ratio\n// of the elements font-size.\n$line-height-method:       rhythm !default;\n\n// The default ratio of line-height to font-size.\n$base-line-height-ratio:   1.5 !default;\n\n// By default we will provide fallbacks when rem is the base unit.\n$rem-fallback:             true !default;\n\n// By default, when rem or em are the base unit we will output a print suitable\n// media query with the define-type-sizing() mixin. This will take care of all\n// print media type sizing effortlessly.\n$auto-print-sizing:        true !default;\n\n// The pt font-size to be used with the print media query when\n// $auto-print-sizing is enabled.\n// Allowed units: pt\n$print-font-size:          12pt !default;\n\n// Default font sizes\n// Once you redefine the $font-size map it will overwrite all sizes here.\n// Allowed units: px\n$font-size: (\n  xxxl:                    60px,\n  xxl:                     46px,\n  xl:                      32px,\n  l:                       24px,\n  m:                       16px,\n  s:                       14px,\n  xs:                      12px\n) !default;\n\n// Default font weights\n// This map and accompanying function help provide granular control over\n// setting and retrieving static font weights.\n$font-weight: (\n  bold:                    700,\n  normal:                  400,\n  lighter:                 200\n) !default;\n\n// Declare typefaces\n// These can use any key you like, and allow you to set global letter-spacing,\n// weight and case for font-families. You can then use the\n// font-family mixin to embed your font families anywhere you like.\n//\n// Each key in the $typefaces map can either be a keyed map of settings\n// using any combination of the keys below, or it can be a shorthand list\n// of each property value. When using shorthand it doesn't matter what order\n// each value is arranged in, but best practice is to do it in the order:\n// [font-family] [letter-spacing] [weight] [case]\n//\n// @setting list font-family\n//   Any standard CSS font-family. Use typey pre-written stacks or roll your own.\n// @setting number letter-spacing\n//   CSS letter-spacing. Specified as a px value when font-size is the\n//   $base-font-size.\n// @setting string weight\n//   A key from the $font-weight map. Only specify this if you want a consistant\n//   font-weight used accross the board with this typeface.\n// @setting string case\n//   A value for CSS text-transform. Only specify this if you want a consistant\n//   case used accross the board with this typeface.\n$typefaces: () !default;\n\n// Declare typestyles\n// These can use any key you like, and allow you to set an easily reusable type\n// style. They can be as simple as a font-size and line-height, or can go on\n// to encompass a full range of css type properties.\n//\n// Each key in the $typestyles map can either be a keyed map of settings\n// using any combination of the keys below, or it can be a shorthand list\n// of each property value. When using shorthand for $typestyles, the first value\n// must always be font-size. After that it doesn't matter what order each value\n// is arranged in, but best practice is to do it in the order:\n// [font-size] [line-height] [weight] [case]\n//\n// @setting number|string font-size\n//   A size from the $font-size map or px value to be converted\n// @setting number $x line-height\n//   Multiple of line height, ratio or px value to be converted.\n// @setting string weight\n//   A key from the $font-weight map.\n// @setting string case\n//   A value for CSS text-transform.\n$typestyles: () !default;\n\n// Debug grid\n// Shows horizontal lines for each elements line height.\n$typey-debug:              false !default;\n\n// Debug grid coloring\n$typey-debug-color:        #4affff !default;\n\n// Lets store the allowed values for text-transform and font-style so we can\n// make shorthand work a little better.\n$text-transform-values: (\n  lowercase,\n  uppercase,\n  capitalize\n) !default;\n\n$font-style-values: (\n  normal,\n  italic,\n  oblique\n) !default;\n\n// Warnings for $base-unit.\n@if $base-unit != px and $base-unit != rem and $base-unit != em {\n  @error \"$base-unit must be one of the following unit types: rem, em or px\";\n}\n\n// Warnings for $base-font-size and $base-line-height.\n@if unit($base-font-size) != px {\n  @error \"$base-font-size must be in px\";\n}\n@if unit($base-line-height) != px {\n  @error \"$base-line-height must be in px\";\n}\n\n// Warnings for $print-font-size.\n@if unit($print-font-size) != pt {\n  @error \"$print-font-size must be in pt\";\n}\n\n// Warnings for $font-size.\n@each $key, $size in $font-size {\n  @if unit($size) != px {\n    @error \"Size '#{$key}' in $font-size map is not specified in px\";\n  }\n}\n\n// Warnings for $font-weight.\n$typey-text-transform-properties: none capitalize uppercase lowercase initial inherit;\n@each $property in $typey-text-transform-properties {\n  @if map-has-key($font-weight, $property) {\n    @warn \"'#{$property}' used in $font-weight map is a potential value of the text-transform property and will conflict when using typey shorthand\";\n  }\n}\n\n// Warnings for $typefaces.\n@each $key, $typeface in $typefaces {\n  @if type-of($typeface) != \"map\" and type-of($typeface) != \"list\" {\n    @error \"Typeface '#{$key}' in $typefaces map must be a keyed map or a shorthand list in the format: [font-family] [letter-spacing] [weight] [case]\";\n  }\n}\n\n// Warnings for $typestyles.\n@each $key, $typestyle in $typestyles {\n  @if type-of($typestyle) == \"list\" {\n    @each $value in $typestyle {\n      @if index($typestyle, $value) == 1 {\n        $allowed-types: \"font-size\", \"px\";\n        $type: typey-check-value($value);\n        @if index($allowed-types, $type) == null {\n          @error \"Incorrect shorthand format used in '#{$key}' in $typestyles map: [font-size] must appear first\";\n        }\n      }\n    }\n  }\n}\n","* {\n  box-sizing: border-box;\n}\n\nhtml {\n  font-size: 100%;\n  line-height: 1.6;\n  font-family: Gibson, Helvetica, Arial, sans-serif;\n  color: #0d121f;\n  background: #fff;\n  -ms-overflow-style: -ms-autohiding-scrollbar;\n}\n\n@media print {\n  html {\n    font-size: 12pt;\n  }\n}\n\nimg {\n  max-width: 100%;\n  height: auto;\n}\n\n.text--blue {\n  color: #1976d2;\n}\n\nb,\nstrong {\n  font-weight: 600;\n}\n\ni,\nem {\n  font-style: italic;\n}\n\np {\n  margin: 0 0 2rem;\n  max-width: 49rem;\n}\n\n.body--xxl {\n  font-size: 1.5rem;\n  line-height: 1.6;\n}\n\n@media (min-width: 600px) {\n  .body--xxl {\n    font-size: 2rem;\n    line-height: 1.4;\n  }\n}\n\n.body--xl {\n  font-size: 1.25rem;\n  line-height: 1.6;\n}\n\n@media (min-width: 600px) {\n  .body--xl {\n    font-size: 1.5rem;\n    line-height: 1.6;\n  }\n}\n\n.lede,\n.body--l {\n  font-size: 1.125rem;\n  line-height: 1.6;\n}\n\n@media (min-width: 600px) {\n  .lede,\n  .body--l {\n    font-size: 1.25rem;\n    line-height: 1.6;\n  }\n}\n\np,\nul,\nol,\n.body--m {\n  font-size: 1rem;\n  line-height: 1.6;\n}\n\n@media (min-width: 600px) {\n  p,\n  ul,\n  ol,\n  .body--m {\n    font-size: 1.125rem;\n    line-height: 1.6;\n  }\n}\n\n.small,\n.body--s {\n  font-size: 0.875rem;\n  line-height: 1.6;\n}\n\n@media (min-width: 600px) {\n  .small,\n  .body--s {\n    font-size: 1rem;\n    line-height: 1.6;\n  }\n}\n\n.body--xs {\n  font-size: 0.75rem;\n  line-height: 1.6;\n}\n\n@media (min-width: 600px) {\n  .body--xs {\n    font-size: 0.875rem;\n    line-height: 1.6;\n  }\n}\n\n.body--xxs {\n  font-size: 0.75rem;\n  line-height: 1.6;\n}\n\nh1,\n.heading--xxl {\n  font-size: 2.5rem;\n  line-height: 1.1;\n  font-weight: 600;\n  font-weight: 700;\n  font-style: normal;\n  margin: 2rem 0;\n}\n\n@media (min-width: 600px) {\n  h1,\n  .heading--xxl {\n    font-size: 3.5rem;\n    line-height: 1.1;\n    font-weight: 700;\n  }\n}\n\nh1:first-child,\n.heading--xxl:first-child {\n  margin-top: 0;\n}\n\n.heading--xl {\n  font-size: 2rem;\n  line-height: 1.1;\n  font-weight: 600;\n  margin: 1rem 0;\n}\n\n@media (min-width: 600px) {\n  .heading--xl {\n    font-size: 2.5rem;\n    line-height: 1.1;\n    font-weight: 600;\n  }\n}\n\nh2,\n.heading--l {\n  font-size: 1.5rem;\n  line-height: 1.2;\n  font-weight: 600;\n  margin: 1rem 0;\n}\n\n@media (min-width: 600px) {\n  h2,\n  .heading--l {\n    font-size: 2rem;\n    line-height: 1.1;\n    font-weight: 600;\n  }\n}\n\nh2:first-child,\n.heading--l:first-child {\n  margin-top: 0;\n}\n\nh3,\n.heading--m {\n  font-size: 1.125rem;\n  line-height: 1.2;\n  font-weight: 600;\n  margin: 2rem 0;\n}\n\n@media (min-width: 600px) {\n  h3,\n  .heading--m {\n    font-size: 1.5rem;\n    line-height: 1.2;\n    font-weight: 600;\n  }\n}\n\nh3:first-child,\n.heading--m:first-child {\n  margin-top: 0;\n}\n\nh4,\n.heading--s {\n  font-size: 1rem;\n  line-height: 1.2;\n  font-weight: 600;\n  margin: 1rem 0;\n}\n\n@media (min-width: 600px) {\n  h4,\n  .heading--s {\n    font-size: 1.125rem;\n    line-height: 1.2;\n    font-weight: 600;\n  }\n}\n\nh5,\nh6,\n.heading--xs {\n  font-size: 1rem;\n  line-height: 1.2;\n  font-weight: 600;\n  margin: 1rem 0;\n}\n\n.heading--xxs {\n  font-size: 0.875rem;\n  line-height: 1.2;\n  font-weight: 600;\n}\n\nul,\nol {\n  margin: 0 0 2rem;\n  padding: 0 0 0 1rem;\n}\n\nul ul,\nul ol,\nol ul,\nol ol {\n  margin: 0 0 0;\n}\n\nul li,\nol li {\n  max-width: 49rem;\n}\n\ndl dt {\n  margin: 2rem 0 0;\n  font-weight: 600;\n}\n\ndl dt:first-child {\n  margin-top: 0;\n}\n\ndl dd {\n  margin: 0;\n}\n\nblockquote {\n  font-size: 1.125rem;\n  line-height: 1.6;\n  margin: 2rem 0;\n  padding: 0 0 0 2rem;\n  border-left: 4px solid #1976d2;\n}\n\n@media (min-width: 600px) {\n  blockquote {\n    font-size: 1.5rem;\n    line-height: 1.6;\n  }\n}\n\n.centered {\n  text-align: center;\n}\n\n.centered p,\n.centered ul,\n.centered ol {\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 49rem;\n}\n\n.centered li {\n  list-style-position: inside;\n}\n\n.align--left {\n  text-align: left;\n  color: #1976d2;\n}\n","// Output a number in the $base-unit.\n//\n// @param number $number\n//   The number (without unit) to output.\n//\n// @return number\n//   The number with the base unit\n@function typey-output-in-base-unit($number) {\n  @if $number == 0 {\n    @return 0;\n  }\n  @if $base-unit == rem {\n    @return $number * 1rem;\n  }\n  @if $base-unit == px {\n    @return $number * 1px;\n  }\n  @if $base-unit == em {\n    @return $number * 1em;\n  }\n}\n\n// Output a number in a chosen unit.\n//\n// @param number $number\n//   The number (without unit) to output.\n// @param string $unit\n//   (optional) The unit to output, either em, px or rem.\n//\n// @return number\n//   The number with the base unit\n@function typey-output-in-unit($number, $unit: $base-unit) {\n  @if $number == 0 {\n    @return 0;\n  }\n  @if $unit == rem {\n    @return $number * 1rem;\n  }\n  @if $unit == px {\n    @return $number * 1px;\n  }\n  @if $unit == em {\n    @return $number * 1em;\n  }\n}\n\n// Remove the unit from a number.\n//\n// @param number $number\n//   The number (with unit) to convert. Allowed units: any\n//\n// @return number\n//   The number without the unit.\n@function typey-strip-unit($number) {\n  @if type-of($number) == \"number\" and not unitless($number) {\n    @return $number / ($number * 0 + 1);\n  }\n  @return $number;\n}\n","// Define font-size (with fallback)\n//\n// @param number|string $size\n//   A size from the $font-size map or px value to be converted\n// @param number|string $context\n//   (optional) Only used if em is the $base-unit. The value of the elements/parents\n//   font-size if it differs from $base-font-size. Specified as a t-shirt size or\n//   value in px.\n@mixin font-size($size, $context: $base-font-size) {\n  $allowed-types: \"font-size\", \"px\";\n  $type: typey-validator($size, $allowed-types);\n  @if $base-unit == rem {\n    @if $rem-fallback == true {\n      @if $type == \"font-size\" {\n        $map-size: map-get($font-size, $size);\n        font-size: $map-size;\n      }\n      @if $type == \"px\" {\n        font-size: $size;\n      }\n    }\n  }\n  font-size: font-size($size, $context);\n}\n","// Define line-height (with fallback).\n//\n// @param number $x\n//   Multiple of line height to be used or px value to be converted.\n// @param number|string $context\n//   (optional) Only used if em is the $base-unit. The value of the\n//   elements/parents font-size if it differs from $base-font-size.\n//   Specified as a t-shirt size or value in px.\n@mixin line-height($x, $context: $base-font-size) {\n  $allowed-types: \"multiplier\", \"px\";\n  $type: typey-validator($x, $allowed-types);\n  @if $base-unit == rem and $line-height-method == \"rhythm\" {\n    @if $rem-fallback == true {\n      @if $type == \"multiplier\" {\n        line-height: $x * $base-line-height;\n      }\n      @if $type == \"px\" {\n        line-height: $x;\n      }\n    }\n  }\n  line-height: line-height($x, $context);\n}\n","//////////////////////////////\n// Default Variables\n//////////////////////////////\n$Breakpoint-Settings: (\n  'default media': all,\n  'default feature': min-width,\n  'default pair': width,\n\n  'force all media type': false,\n  'to ems': false,\n  'transform resolutions': true,\n\n  'no queries': false,\n  'no query fallbacks': false,\n\n  'base font size': 16px,\n\n  'legacy syntax': false\n);\n\n$breakpoint: () !default;\n\n//////////////////////////////\n// Imports\n//////////////////////////////\n@import \"breakpoint/settings\";\n@import 'breakpoint/context';\n@import 'breakpoint/helpers';\n@import 'breakpoint/parsers';\n@import 'breakpoint/no-query';\n\n@import 'breakpoint/respond-to';\n\n@import \"breakpoint/legacy-settings\";\n\n//////////////////////////////\n// Breakpoint Mixin\n//////////////////////////////\n\n@mixin breakpoint($query, $no-query: false) {\n  @include legacy-settings-warning;\n\n  // Reset contexts\n  @include private-breakpoint-reset-contexts();\n\n  $breakpoint: breakpoint($query, false);\n\n  $query-string: map-get($breakpoint, 'query');\n  $query-fallback: map-get($breakpoint, 'fallback');\n\n  $private-breakpoint-context-holder: map-get($breakpoint, 'context holder') !global;\n  $private-breakpoint-query-count: map-get($breakpoint, 'query count') !global;\n\n  // Allow for an as-needed override or usage of no query fallback.\n  @if $no-query != false {\n    $query-fallback: $no-query;\n  }\n\n  @if $query-fallback != false {\n    $context-setter: private-breakpoint-set-context('no-query', $query-fallback);\n  }\n\n  // Print Out Query String\n  @if not breakpoint-get('no queries') {\n    @media #{$query-string} {\n      @content;\n    }\n  }\n\n  @if breakpoint-get('no query fallbacks') != false or breakpoint-get('no queries') == true {\n\n    $type: type-of(breakpoint-get('no query fallbacks'));\n    $print: false;\n\n    @if ($type == 'bool') {\n      $print: true;\n    }\n    @else if ($type == 'string') {\n      @if $query-fallback == breakpoint-get('no query fallbacks') {\n        $print: true;\n      }\n    }\n    @else if ($type == 'list') {\n      @each $wrapper in breakpoint-get('no query fallbacks') {\n        @if $query-fallback == $wrapper {\n          $print: true;\n        }\n      }\n    }\n\n    // Write Fallback\n    @if ($query-fallback != false) and ($print == true) {\n      $type-fallback: type-of($query-fallback);\n\n      @if ($type-fallback != 'bool') {\n        #{$query-fallback} & {\n          @content;\n        }\n      }\n      @else {\n        @content;\n      }\n    }\n  }\n\n  @include private-breakpoint-reset-contexts();\n}\n\n\n@mixin mq($query, $no-query: false) {\n  @include breakpoint($query, $no-query) {\n    @content;\n  }\n}\n","// Typeset your type.\n//\n// @param string $typestyle\n//   A type style from the $typestyles map.\n// @param number|string $context\n//   (optional) Only used if em is the $base-unit. The value of the\n//   elements/parents font-size if it differs from $base-font-size.\n//   Specified as a t-shirt size or value in px.\n@mixin typeset($typestyle, $context: $base-font-size) {\n  $typestyle: map-get($typestyles, $typestyle);\n\n  $font-size: false;\n  $line-height: false;\n  $weight: false;\n  $style: false;\n  $case: false;\n  $letter-spacing: false;\n\n  // Assign values to variables when $typestyle is a keyed map.\n  @if type-of($typestyle) == \"map\" {\n    @if map-has-key($typestyle, font-size) {\n      $font-size: map-get($typestyle, font-size);\n    }\n    @if map-has-key($typestyle, line-height) {\n      $line-height: map-get($typestyle, line-height);\n    }\n    @if map-has-key($typestyle, weight) {\n      $weight: map-get($typestyle, weight);\n    }\n    @if map-has-key($typestyle, style) {\n      $style: map-get($typestyle, style);\n    }\n    @if map-has-key($typestyle, case) {\n      $case: map-get($typestyle, case);\n    }\n    @if map-has-key($typestyle, letter-spacing) {\n      $letter-spacing: map-get($typestyle, letter-spacing);\n    }\n  }\n\n  // Assign values to variables when $typestyle is shorthand.\n  @if type-of($typestyle) == \"list\" {\n    @each $value in $typestyle {\n      // The first value is always font-size.\n      @if index($typestyle, $value) == 1 {\n        $font-size: $value;\n      }\n      // This is a line-height value.\n      @else if type-of($value) == \"number\" and index($typestyle, $value) == 2 {\n        $line-height: $value;\n      }\n      // This is a font-weight value.\n      @else if map-has-key($font-weight, $value) {\n        $weight: $value;\n      }\n      // This is a case value.\n      @else if type-of($value) == \"string\" and index($text-transform-values, $value) != null {\n        $case: $value;\n      }\n      // This is a style value.\n      @else if type-of($value) == \"string\" and index($font-style-values, $value) != null {\n        $style: $value;\n      }\n      // This is a letter-spacing value.\n      @else if type-of($value) == \"number\" and index($typestyle, $value) != 2 and index($typestyle, $value) != 1 {\n        $letter-spacing: $value;\n      }\n    }\n  }\n\n  // $typestyle may also be a solitary font-size.\n  @if type-of($typestyle) != \"map\" and type-of($typestyle) != \"list\" {\n    $font-size: $typestyle;\n  }\n\n  // Output properties.\n  @if $font-size {\n    @include font-size($font-size, $context);\n  }\n  @if $line-height {\n    @include typey-debug-grid($line-height, $font-size);\n    @include line-height($line-height, $font-size);\n  }\n  @else {\n    // Using default line-height so set debug grid accordingly.\n    @include typey-debug-grid($base-line-height, $font-size);\n  }\n  @if $weight {\n    font-weight: weight($weight);\n  }\n  @if $style {\n    font-style: $style;\n  }\n  @if $case {\n    text-transform: $case;\n  }\n  @if $letter-spacing {\n    letter-spacing: calculate-em-px($letter-spacing, $font-size);\n  }\n}\n"]}