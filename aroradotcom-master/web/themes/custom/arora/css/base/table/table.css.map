{"version":3,"sources":["base/table/table.scss","../../../../node_modules/typey/stylesheets/typey/functions/_helpers.scss","init/_colors.scss","init/_typography.scss","../../../../node_modules/breakpoint-sass/stylesheets/_breakpoint.scss","base/table/table.css"],"names":[],"mappings":"AAkBA;EACE,iBCPwB;EDQxB,YAAW;EACX,0BAAyB;EACzB,qBAAa;EAAb,qBAAa;EAAb,cAAa;EACb,iBAAgB;CAajB;;AAlBD;;EASI,gBCfsB;EDgBtB,oBAAmB;EACnB,iBAAgB;EAChB,iCEXiC;CFYlC;;AAbH;EAgBI,iBGRgB;CHSjB;;AAGH;EAGM,uBExB4B;CFyB7B;;AAJL;EAOM,0BE3B+B;CF4BhC;;AIkBD;EJNJ;IAEI,0BEzCiC;IF0CjC,iBAAgB;IAChB,gBAAe;IACf,qBAAa;IAAb,qBAAa;IAAb,cAAa;GAEhB;CK9BA","file":"table.css","sourcesContent":["@import 'init/init';\n\n// Table\n//\n// The default table display.\n//\n// .table--zebra - Adds zebra striping to a table.\n//\n// Markup: table.twig\n//\n// Style guide: 4.4\n\n$chroma: add-colors('primary', (\n  table-border:     'grey-light',\n  table-td-odd-bg:  'white',\n  table-td-even-bg: 'grey-xlight'\n));\n\ntable {\n  margin: 0 0 $spacing-m;\n  width: 100%;\n  border-collapse: collapse;\n  display: flex;\n  overflow-y: auto;\n\n  th,\n  td {\n    padding: $spacing-s;\n    vertical-align: top;\n    text-align: left;\n    border-bottom: 1px solid color(table-border);\n  }\n\n  th {\n    font-weight: weight(medium);\n  }\n}\n\n.table--zebra {\n  tr {\n    &:nth-child(odd) td {\n      background-color: color(table-td-odd-bg);\n    }\n\n    &:nth-child(even) td {\n      background-color: color(table-td-even-bg);\n    }\n  }\n}\n\n// Table\n//\n// A basic responsive solution.\n//\n// Markup: table-responsive.twig\n//\n// Style guide: 4.4.1\n\n.table--responsive {\n  @include respond-to(phone-only) {\n    border: 1px solid color(grey-light);\n    overflow-y: auto;\n    max-width: 100%;\n    display: flex;\n  }\n}\n","// Output a number in the $base-unit.\n//\n// @param number $number\n//   The number (without unit) to output.\n//\n// @return number\n//   The number with the base unit\n@function typey-output-in-base-unit($number) {\n  @if $number == 0 {\n    @return 0;\n  }\n  @if $base-unit == rem {\n    @return $number * 1rem;\n  }\n  @if $base-unit == px {\n    @return $number * 1px;\n  }\n  @if $base-unit == em {\n    @return $number * 1em;\n  }\n}\n\n// Output a number in a chosen unit.\n//\n// @param number $number\n//   The number (without unit) to output.\n// @param string $unit\n//   (optional) The unit to output, either em, px or rem.\n//\n// @return number\n//   The number with the base unit\n@function typey-output-in-unit($number, $unit: $base-unit) {\n  @if $number == 0 {\n    @return 0;\n  }\n  @if $unit == rem {\n    @return $number * 1rem;\n  }\n  @if $unit == px {\n    @return $number * 1px;\n  }\n  @if $unit == em {\n    @return $number * 1em;\n  }\n}\n\n// Remove the unit from a number.\n//\n// @param number $number\n//   The number (with unit) to convert. Allowed units: any\n//\n// @return number\n//   The number without the unit.\n@function typey-strip-unit($number) {\n  @if type-of($number) == \"number\" and not unitless($number) {\n    @return $number / ($number * 0 + 1);\n  }\n  @return $number;\n}\n","// scss-lint:disable ColorKeyword, ColorVariable, SpaceAfterComma\n\n// Colors\n//\n// Use the `color()` function to add colors to CSS properties. Documentation is available in\n// [John Albins Github site](http://johnalbin.github.io/chroma/).\n//\n// Markup: chroma-kss-markup.twig\n//\n// Style guide: 1.1\n\n@import 'chroma';\n@import 'chroma/kss';\n\n// These colours make up the building blocks for component colors.\n$chroma: define-default-color-scheme('Descriptive color names for use in \"functional\" color names below.');\n$chroma: add-colors((\n    'white':                  #fff,\n    'grey-xlight':            #f9f9f9,\n    'grey-light':             #e6e6e6,\n    'grey':                   #7f7f7f,\n    'grey-mid':               #6f6f6f, // lightest for text\n    'grey-dark':              #4a4e57,\n    'black':                  #0d121f,\n    'blue-light':             #e8f1fa,\n    'blue':                   #1976d2,\n    'dark-blue':              #002664,\n    'teal':                   #00a1b6,\n    'blue-green':             #009688,\n    'green-vibrant':          #3a863d,\n    'green-light':            #6b9d41,\n    'purple':                 #903f97,\n    'orange':                 #f78f1e,\n    'red':                    #e41e63,\n    'translucent-shadow':     ('black' rgba .5),\n    'translucent-overlay':    ('black' rgba .6),\n    'translucent-black':      ('black' rgba .8),\n));\n\n// The primary color scheme provides components with colors.\n// Primary colors should be defined in each component.\n// @see src/base/text/_text.scss for an example.\n$chroma: define-color-scheme('primary', 'Colors used by design components.');\n\n$chroma-active-scheme: 'primary';\n","// Typey\n//\n// Typey is used to manage and resize units and font sizes. Some documentation is available in\n// [Jacks typey repo](https://github.com/jptaranto/typey).\n//\n// Style guide: 1.5\n\n@import 'typey';\n\n$base-unit:               rem;\n// Enable REM fallbacks if the project is IE8+\n// Ensure use of mixins, instead of functions.\n$rem-fallback:            false;\n\n$base-font-size:          16px;\n// The base line height is used when specify unitless spacing for margins.\n// e.g. @include margin(1) will output margin: 20px; (converted to rem).\n$base-line-height:        26px;\n\n// Ratio line-height is the simplest line height method, and is expressed as a unitless\n// ratio of the font-size.\n$line-height-method:      ratio;\n$base-line-height-ratio:  1.6;\n\n$font-weight: (\n  bold:          700,\n  medium:        600,\n  normal:        400\n);\n\n// Generic typeset() values.\n$typestyles: (\n  heading-xxl:    56px 1.1 bold, // h1\n  heading-xl:     40px 1.1 medium,\n  heading-l:      32px 1.1 medium, // h2\n  heading-m:      24px 1.2 medium, // h3\n  heading-s:      18px 1.2 medium, // h4\n  heading-xs:     16px 1.2 medium, // h5\n  heading-xxs:    14px 1.2 medium, // h5\n  body-xxl:       32px 1.4,\n  body-xl:        24px 1.6, // blockquote\n  body-l:         20px 1.6, // lede\n  body-m:         18px 1.6,\n  body-s:         16px 1.6, // default\n  body-xs:        14px 1.6, // small, caption\n  body-xxs:       12px 1.6,\n  ui-xxl:         32px 1,\n  ui-xl:          24px 1,\n  ui-l:           20px 1,\n  ui-m:           18px 1,\n  ui-s:           16px 1, // input, buttons, label\n  ui-xs:          14px 1, // small row\n  ui-xxs:         12px 1,\n);\n\n// Font stacks\n$font-base:      Gibson, Helvetica, Arial, sans-serif;\n\n$typefaces: (\n  base:          $font-base,\n);\n","//////////////////////////////\n// Default Variables\n//////////////////////////////\n$Breakpoint-Settings: (\n  'default media': all,\n  'default feature': min-width,\n  'default pair': width,\n\n  'force all media type': false,\n  'to ems': false,\n  'transform resolutions': true,\n\n  'no queries': false,\n  'no query fallbacks': false,\n\n  'base font size': 16px,\n\n  'legacy syntax': false\n);\n\n$breakpoint: () !default;\n\n//////////////////////////////\n// Imports\n//////////////////////////////\n@import \"breakpoint/settings\";\n@import 'breakpoint/context';\n@import 'breakpoint/helpers';\n@import 'breakpoint/parsers';\n@import 'breakpoint/no-query';\n\n@import 'breakpoint/respond-to';\n\n@import \"breakpoint/legacy-settings\";\n\n//////////////////////////////\n// Breakpoint Mixin\n//////////////////////////////\n\n@mixin breakpoint($query, $no-query: false) {\n  @include legacy-settings-warning;\n\n  // Reset contexts\n  @include private-breakpoint-reset-contexts();\n\n  $breakpoint: breakpoint($query, false);\n\n  $query-string: map-get($breakpoint, 'query');\n  $query-fallback: map-get($breakpoint, 'fallback');\n\n  $private-breakpoint-context-holder: map-get($breakpoint, 'context holder') !global;\n  $private-breakpoint-query-count: map-get($breakpoint, 'query count') !global;\n\n  // Allow for an as-needed override or usage of no query fallback.\n  @if $no-query != false {\n    $query-fallback: $no-query;\n  }\n\n  @if $query-fallback != false {\n    $context-setter: private-breakpoint-set-context('no-query', $query-fallback);\n  }\n\n  // Print Out Query String\n  @if not breakpoint-get('no queries') {\n    @media #{$query-string} {\n      @content;\n    }\n  }\n\n  @if breakpoint-get('no query fallbacks') != false or breakpoint-get('no queries') == true {\n\n    $type: type-of(breakpoint-get('no query fallbacks'));\n    $print: false;\n\n    @if ($type == 'bool') {\n      $print: true;\n    }\n    @else if ($type == 'string') {\n      @if $query-fallback == breakpoint-get('no query fallbacks') {\n        $print: true;\n      }\n    }\n    @else if ($type == 'list') {\n      @each $wrapper in breakpoint-get('no query fallbacks') {\n        @if $query-fallback == $wrapper {\n          $print: true;\n        }\n      }\n    }\n\n    // Write Fallback\n    @if ($query-fallback != false) and ($print == true) {\n      $type-fallback: type-of($query-fallback);\n\n      @if ($type-fallback != 'bool') {\n        #{$query-fallback} & {\n          @content;\n        }\n      }\n      @else {\n        @content;\n      }\n    }\n  }\n\n  @include private-breakpoint-reset-contexts();\n}\n\n\n@mixin mq($query, $no-query: false) {\n  @include breakpoint($query, $no-query) {\n    @content;\n  }\n}\n","table {\n  margin: 0 0 1rem;\n  width: 100%;\n  border-collapse: collapse;\n  display: flex;\n  overflow-y: auto;\n}\n\ntable th,\ntable td {\n  padding: 0.5rem;\n  vertical-align: top;\n  text-align: left;\n  border-bottom: 1px solid #e6e6e6;\n}\n\ntable th {\n  font-weight: 600;\n}\n\n.table--zebra tr:nth-child(odd) td {\n  background-color: #fff;\n}\n\n.table--zebra tr:nth-child(even) td {\n  background-color: #f9f9f9;\n}\n\n@media (max-width: 599px) {\n  .table--responsive {\n    border: 1px solid #e6e6e6;\n    overflow-y: auto;\n    max-width: 100%;\n    display: flex;\n  }\n}\n"]}