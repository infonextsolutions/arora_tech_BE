{"version":3,"sources":["components/hero-banner/hero-banner.scss","utils/background-image/_background-image.scss","init/_colors.scss","../../../../node_modules/typey/stylesheets/typey/functions/_helpers.scss","../../../../node_modules/breakpoint-sass/stylesheets/_breakpoint.scss","components/hero-banner/hero-banner.css"],"names":[],"mappings":"AAqBA;ECyBE,mBAAkB;EDtBlB,0BEAmC;CF8CpC;;AAjDD;ECgCI,uBEzCsB;EF0CtB,YAAW;CACZ;;ADlCH;EChBE,mBAAkB;EAClB,OAAM;EACN,QAAO;EACP,aAAY;EACZ,YAAW;EAMT,YAAW;EACX,wCCOiC;EDNjC,WAAU;CACX;;AG8CC;EJ3CJ;IC8BM,uBEvCoB;GF2CvB;CI9BF;;ALJD;EChBE,mBAAkB;EAClB,OAAM;EACN,QAAO;EACP,aAAY;EACZ,YAAW;EAkDT,eAAc;EACd,qBAAiB;KAAjB,kBAAiB;EACjB,uBEjDsB;CFkDvB;;ADzCH;EAOI,cAAa;CACd;;AARH;ECOE,uBEhBwB;EFiBxB,mBAAkB;EAClB,WAAU;EACV,qBAAa;EAAb,qBAAa;EAAb,cAAa;EACb,6BAAsB;EAAtB,8BAAsB;MAAtB,2BAAsB;UAAtB,uBAAsB;EACtB,yBAAuB;MAAvB,sBAAuB;UAAvB,wBAAuB;EDArB,kBGrBsB;EHsBtB,qBGtBsB;CHuBvB;;AI6BC;EJ3CJ;ICKI,uBEdsB;GHuBvB;CKsBF;;AJrBC;EDfF;ICiBI,mBE1BsB;GHuBvB;CK4BF;;AL1CD;EAiBI,YAAW;EACX,iBG3BsB;CH4BvB;;AAnBH;EAsBI,YAAW;CACZ;;AAEA;EAEG,iBGpCoB;EHqCpB,0BAAmB;MAAnB,uBAAmB;UAAnB,oBAAmB;EACnB,mBAAkB;CACnB;;AALF;EAQG,gBAAe;CAChB;;AAGH;EACE,0BErCiC;EFsCjC,YE3C8B;CFgD/B;;AAPA;EAKG,eAAc;CACf;;AAGH;EC9DA,mBAAkB;EAClB,OAAM;EACN,QAAO;EACP,aAAY;EACZ,YAAW;CD4DV","file":"hero-banner.css","sourcesContent":["@import 'init/init';\n@import 'utils/background-image/background-image';\n\n// Hero banner\n//\n// A generic content hero banner with optional image. The hero banner content can\n// be left or center aligned.\n//\n// .hero-banner--image - The image version, which reverses the text colour.\n// .hero-banner--centered - The center aligned version.\n//\n// Markup: hero-banner.twig\n//\n// Styleguide: 6.28\n\n$chroma: add-colors('primary', (\n    hero-banner-bg:       'blue-light',\n    hero-banner-bg-rev:   'grey-dark',\n    hero-banner-text-rev: 'white',\n));\n\n.hero-banner,\n%hero-banner {\n  @include background-image;\n  background-color: color(hero-banner-bg);\n\n  // move this to styleguide only.\n  picture {\n    display: none;\n  }\n\n  .container {\n    @include background-image-overlay;\n    padding-top: $spacing-m;\n    padding-bottom: $spacing-m;\n  }\n\n  h1 {\n    width: 100%; // IE fix.\n    max-width: $container-small-max-width;\n  }\n\n  p {\n    width: 100%; // IE fix.\n  }\n\n  &--centered {\n    .container {\n      max-width: $container-small-max-width;\n      align-items: center;\n      text-align: center;\n    }\n\n    p {\n      max-width: none;\n    }\n  }\n\n  &--image {\n    background-color: color(hero-banner-bg-rev);\n    color: color(hero-banner-text-rev);\n\n    picture {\n      display: block;\n    }\n  }\n\n  &__imagery {\n    @include background-image-container;\n  }\n}\n","@import 'init/init';\n\n// Background images\n\n@mixin background-image-container {\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n}\n\n@mixin background-image-filter {\n  &::before {\n    @include background-image-container;\n    content: '';\n    background-color: color(translucent-overlay);\n    z-index: 2;\n  }\n}\n\n@mixin background-image-overlay(\n  $mobile-height: $background-image-mobile,\n  $desktop-height: $background-image-desktop\n) {\n  @include respond-to(tablet-landscape-up) {\n    min-height: $desktop-height;\n  }\n  min-height: $mobile-height;\n  position: relative;\n  z-index: 3;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n\n  // sass-lint:disable no-vendor-prefixes\n  @media all and (-ms-high-contrast: none) {\n    // IE flex + center align bug fix.\n    height: $mobile-height;\n  }\n}\n\n@mixin background-image(\n  $mobile-height: $background-image-mobile,\n  $desktop-height: $background-image-desktop\n) {\n  position: relative;\n\n  picture {\n    @include background-image-filter;\n    @include respond-to(tablet-landscape-up) {\n      min-height: $desktop-height;\n    }\n    min-height: $mobile-height;\n    width: 100%;\n  }\n\n  img {\n    @include background-image-container;\n    display: block;\n    object-fit: cover;\n    min-height: $mobile-height;\n  }\n}\n","// scss-lint:disable ColorKeyword, ColorVariable, SpaceAfterComma\n\n// Colors\n//\n// Use the `color()` function to add colors to CSS properties. Documentation is available in\n// [John Albins Github site](http://johnalbin.github.io/chroma/).\n//\n// Markup: chroma-kss-markup.twig\n//\n// Style guide: 1.1\n\n@import 'chroma';\n@import 'chroma/kss';\n\n// These colours make up the building blocks for component colors.\n$chroma: define-default-color-scheme('Descriptive color names for use in \"functional\" color names below.');\n$chroma: add-colors((\n    'white':                  #fff,\n    'grey-xlight':            #f9f9f9,\n    'grey-light':             #e6e6e6,\n    'grey':                   #7f7f7f,\n    'grey-mid':               #6f6f6f, // lightest for text\n    'grey-dark':              #4a4e57,\n    'black':                  #0d121f,\n    'blue-light':             #e8f1fa,\n    'blue':                   #1976d2,\n    'dark-blue':              #002664,\n    'teal':                   #00a1b6,\n    'blue-green':             #009688,\n    'green-vibrant':          #3a863d,\n    'green-light':            #6b9d41,\n    'purple':                 #903f97,\n    'orange':                 #f78f1e,\n    'red':                    #e41e63,\n    'translucent-shadow':     ('black' rgba .5),\n    'translucent-overlay':    ('black' rgba .6),\n    'translucent-black':      ('black' rgba .8),\n));\n\n// The primary color scheme provides components with colors.\n// Primary colors should be defined in each component.\n// @see src/base/text/_text.scss for an example.\n$chroma: define-color-scheme('primary', 'Colors used by design components.');\n\n$chroma-active-scheme: 'primary';\n","// Output a number in the $base-unit.\n//\n// @param number $number\n//   The number (without unit) to output.\n//\n// @return number\n//   The number with the base unit\n@function typey-output-in-base-unit($number) {\n  @if $number == 0 {\n    @return 0;\n  }\n  @if $base-unit == rem {\n    @return $number * 1rem;\n  }\n  @if $base-unit == px {\n    @return $number * 1px;\n  }\n  @if $base-unit == em {\n    @return $number * 1em;\n  }\n}\n\n// Output a number in a chosen unit.\n//\n// @param number $number\n//   The number (without unit) to output.\n// @param string $unit\n//   (optional) The unit to output, either em, px or rem.\n//\n// @return number\n//   The number with the base unit\n@function typey-output-in-unit($number, $unit: $base-unit) {\n  @if $number == 0 {\n    @return 0;\n  }\n  @if $unit == rem {\n    @return $number * 1rem;\n  }\n  @if $unit == px {\n    @return $number * 1px;\n  }\n  @if $unit == em {\n    @return $number * 1em;\n  }\n}\n\n// Remove the unit from a number.\n//\n// @param number $number\n//   The number (with unit) to convert. Allowed units: any\n//\n// @return number\n//   The number without the unit.\n@function typey-strip-unit($number) {\n  @if type-of($number) == \"number\" and not unitless($number) {\n    @return $number / ($number * 0 + 1);\n  }\n  @return $number;\n}\n","//////////////////////////////\n// Default Variables\n//////////////////////////////\n$Breakpoint-Settings: (\n  'default media': all,\n  'default feature': min-width,\n  'default pair': width,\n\n  'force all media type': false,\n  'to ems': false,\n  'transform resolutions': true,\n\n  'no queries': false,\n  'no query fallbacks': false,\n\n  'base font size': 16px,\n\n  'legacy syntax': false\n);\n\n$breakpoint: () !default;\n\n//////////////////////////////\n// Imports\n//////////////////////////////\n@import \"breakpoint/settings\";\n@import 'breakpoint/context';\n@import 'breakpoint/helpers';\n@import 'breakpoint/parsers';\n@import 'breakpoint/no-query';\n\n@import 'breakpoint/respond-to';\n\n@import \"breakpoint/legacy-settings\";\n\n//////////////////////////////\n// Breakpoint Mixin\n//////////////////////////////\n\n@mixin breakpoint($query, $no-query: false) {\n  @include legacy-settings-warning;\n\n  // Reset contexts\n  @include private-breakpoint-reset-contexts();\n\n  $breakpoint: breakpoint($query, false);\n\n  $query-string: map-get($breakpoint, 'query');\n  $query-fallback: map-get($breakpoint, 'fallback');\n\n  $private-breakpoint-context-holder: map-get($breakpoint, 'context holder') !global;\n  $private-breakpoint-query-count: map-get($breakpoint, 'query count') !global;\n\n  // Allow for an as-needed override or usage of no query fallback.\n  @if $no-query != false {\n    $query-fallback: $no-query;\n  }\n\n  @if $query-fallback != false {\n    $context-setter: private-breakpoint-set-context('no-query', $query-fallback);\n  }\n\n  // Print Out Query String\n  @if not breakpoint-get('no queries') {\n    @media #{$query-string} {\n      @content;\n    }\n  }\n\n  @if breakpoint-get('no query fallbacks') != false or breakpoint-get('no queries') == true {\n\n    $type: type-of(breakpoint-get('no query fallbacks'));\n    $print: false;\n\n    @if ($type == 'bool') {\n      $print: true;\n    }\n    @else if ($type == 'string') {\n      @if $query-fallback == breakpoint-get('no query fallbacks') {\n        $print: true;\n      }\n    }\n    @else if ($type == 'list') {\n      @each $wrapper in breakpoint-get('no query fallbacks') {\n        @if $query-fallback == $wrapper {\n          $print: true;\n        }\n      }\n    }\n\n    // Write Fallback\n    @if ($query-fallback != false) and ($print == true) {\n      $type-fallback: type-of($query-fallback);\n\n      @if ($type-fallback != 'bool') {\n        #{$query-fallback} & {\n          @content;\n        }\n      }\n      @else {\n        @content;\n      }\n    }\n  }\n\n  @include private-breakpoint-reset-contexts();\n}\n\n\n@mixin mq($query, $no-query: false) {\n  @include breakpoint($query, $no-query) {\n    @content;\n  }\n}\n",".hero-banner {\n  position: relative;\n  background-color: #e8f1fa;\n}\n\n.hero-banner picture {\n  min-height: 14.4375rem;\n  width: 100%;\n}\n\n.hero-banner picture::before {\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  content: '';\n  background-color: rgba(13, 18, 31, 0.6);\n  z-index: 2;\n}\n\n@media (min-width: 900px) {\n  .hero-banner picture {\n    min-height: 32.0625rem;\n  }\n}\n\n.hero-banner img {\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  display: block;\n  object-fit: cover;\n  min-height: 14.4375rem;\n}\n\n.hero-banner picture {\n  display: none;\n}\n\n.hero-banner .container {\n  min-height: 14.4375rem;\n  position: relative;\n  z-index: 3;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  padding-top: 1rem;\n  padding-bottom: 1rem;\n}\n\n@media (min-width: 900px) {\n  .hero-banner .container {\n    min-height: 32.0625rem;\n  }\n}\n\n@media all and (-ms-high-contrast: none) {\n  .hero-banner .container {\n    height: 14.4375rem;\n  }\n}\n\n.hero-banner h1 {\n  width: 100%;\n  max-width: 53rem;\n}\n\n.hero-banner p {\n  width: 100%;\n}\n\n.hero-banner--centered .container {\n  max-width: 53rem;\n  align-items: center;\n  text-align: center;\n}\n\n.hero-banner--centered p {\n  max-width: none;\n}\n\n.hero-banner--image {\n  background-color: #4a4e57;\n  color: #fff;\n}\n\n.hero-banner--image picture {\n  display: block;\n}\n\n.hero-banner__imagery {\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n}\n"]}